def density_heatmap(img, box_centers, radias=100):
    import matplotlib.pyplot as plt
    from colour import Color
    from scipy.spatial import distance
    density_range = 100
    gradient = np.linspace(0, 1, density_range)
    img_width = img.shape[1]
    img_height = img.shape[0]
    density_map = np.zeros((img_height, img_width))
    color_map = np.empty([img_height, img_width, 3], dtype=np.uint8)
    # get gradient color using rainbow
    cmap = plt.get_cmap("cool") # Use matplotlib to get the color gradient
    blue = Color("blue") # Use Color to generate color gradient
    hex_colors = list(blue.range_to(Color("red"), density_range))
    rgb_colors = [[rgb * 255 for rgb in color.rgb] for color in hex_colors][::-1]
    for i in range(img_height):
        for j in range(img_width):
            for box in box_centers:
                dist = distance.euclidean(box, (j, i))
                if dist <= radias * 0.25:
                    density_map[i][j] += 10
                elif dist <= radias:
                    density_map[i][j] += (radias - dist) / (radias * 0.75) * 10
            ratio = min(density_range-1, int(density_map[i][j]))
            for k in range(3):
                color_map[i][j][k] = rgb_colors[ratio][k]
    return color_map
    
    hm =  density_heatmap(img, coord, radias=200)
    
    overlay = img.copy()
alpha = 0.5 # Set the transparency of the overlay image
cv2.rectangle(overlay, (0, 0), (img.shape[1], img.shape[0]), (255, 0, 0), -1) # Set blue as the basic color of the heat map
cv2.addWeighted(overlay, alpha, img, 1-alpha, 0, img) # Overwrite the background heat map to the original image
cv2.addWeighted(hm, alpha, img, 1-alpha, 0, overlay) # Overwrite the heat map to the original image
cv2.imshow('frame', overlay)
cv2.waitKey(0)
cv2.destroyAllWindows()


   
